@using PTSL.GENERIC.Web.Core.Helper.Enum.Project
@model PTSL.GENERIC.Web.Core.Model.EntityViewModels.Project.TestScenarioVM

@{
    ViewBag.Title = "Create Test Scenarios";
    var Message = ViewBag.Message;
    ViewBag.activeMenu = "Test Scenario";
}

<style>
    .add-participant-container {
        display: flex;
        justify-content: right;
        align-items: end;
    }

    label.error {
        color: red !important;
    }

</style>


@*<style>
    input, select {
        height: 30px!important;
        line-height: 10px !important;
        font-weight: 400 !important;
        color: black !important;
    }

    legend {
        font-weight: 500 !important;
        font-size: 20px!important;
    }
</style>*@

<style>
    .gray-card {
        background: rgba(39, 58, 143, 0.11) !important;
        border-radius: 30px;
    }

    .custom label, .custom legend {
        font-weight: 700;
        margin-bottom: 0;
    }

    .custom fieldset {
        padding: 15px 15px !important;
        border-radius: 10px;
        border-width: 2px !important;
    }

    .custom fieldset .pr-1{
        margin-bottom: 10px;
    }
</style>


<div class="card">
    <div class="card-header">
        <h4>
            <a href="/TestScenario/Index" class="mr-1 back">
                <svg width="20" height="20" viewBox="0 0 32 32">
                    <path fill="currentColor" d="m14 26l1.41-1.41L7.83 17H28v-2H7.83l7.58-7.59L14 6L4 16l10 10z" />
                </svg>
            </a>
            Create Test Scenarios
        </h4>
       @*  <button class="ml-auto reset btn btn-sm" onclick="location.reload()">
            <svg class="rotate180z" width="16" height="16" viewBox="0 0 32 32">
                <path d="M25.95 7.65l.005-.004c-.092-.11-.197-.206-.293-.312c-.184-.205-.367-.41-.563-.603c-.139-.136-.286-.262-.43-.391c-.183-.165-.366-.329-.558-.482c-.16-.128-.325-.247-.49-.367c-.192-.14-.385-.277-.585-.406a13.513 13.513 0 0 0-.533-.324q-.308-.179-.625-.341c-.184-.094-.37-.185-.56-.27c-.222-.1-.449-.191-.678-.28c-.19-.072-.378-.145-.571-.208c-.246-.082-.498-.15-.75-.217c-.186-.049-.368-.102-.556-.143c-.29-.063-.587-.107-.883-.15c-.16-.023-.315-.056-.476-.073A12.933 12.933 0 0 0 6 7.703V4H4v8h8v-2H6.811A10.961 10.961 0 0 1 16 5a11.111 11.111 0 0 1 1.189.067c.136.015.268.042.403.061c.25.037.501.075.746.128c.16.035.315.08.472.121c.213.057.425.114.633.183c.164.054.325.116.486.178c.193.074.384.15.57.235c.162.072.32.15.477.23q.268.136.526.286c.153.09.305.18.453.276c.168.11.33.224.492.342c.14.102.282.203.417.312c.162.13.316.268.47.406c.123.11.248.217.365.332c.167.164.323.338.479.512A10.993 10.993 0 1 1 5 16H3a13 13 0 1 0 22.95-8.35z" fill="currentColor" />
            </svg>
            Reset
        </button> *@
    </div>
    <div style="padding-left: 15px; padding-right: 15px;">

        <form id="TestScenarioForm" class="card-body mt-2 gray-card">

            <div class="row p-1 custom ">
                <div class="p-2 col-12">

                    <div class="row custom forest-location">
                        <div class="col-6 p-1">
                            <label class="m-0">Project <span style="color: red;">*</span></label>
                            @Html.DropDownList("ProjectRequestId", null, "Choose Project", htmlAttributes: new { @class = "form-control col-md-12", @required = "required" })
                        </div>
                        <div class="col-6 p-1">
                            <label class="m-0">Task <span style="color: red;">*</span></label>
                            @Html.DropDownList("TaskOfProjectId", null, "Choose Task", htmlAttributes: new { @class = "form-control col-md-12", @required = "required" })
                        </div>
                    </div>

                    <div class="row custom ">
                        <div class="col-12 p-1">
                            <fieldset class="p-2">
                                <legend class="float-none w-auto">Test Scenario Details</legend>
                                <div class="row">
                                    <div class="col-6 pr-1" style="max-width: 245px;">
                                        <label class="m-0">Module <span style="color: red;">*</span></label>
                                        <input type="text" class="form-control col-md-12" id="Module" name="Module" value="" placeholder="Enter Module Name" required>
                                    </div>
                                    <div class="col-6 pr-1" style="max-width: 245px;">
                                        <label class="m-0">User Type <span style="color: red;">*</span></label>
                                        <input type="text" class="form-control col-md-12" id="UserType" name="UserType" value="" placeholder="Enter User Type" required>
                                    </div>
                                    <div class="col-6 pr-1" style="max-width: 245px;">
                                        <label class="m-0">Sub Module <span style="color: red;">*</span></label>
                                        <input type="text" class="form-control col-md-12" id="SubModule" name="SubModule" value="" placeholder="Enter Sub Module" required>
                                    </div>
                                    <div class="col-6 pr-1" style="max-width: 245px;">
                                        <label class="m-0">Sub Module 1<span style="color: red;">*</span></label>
                                        <input type="text" class="form-control col-md-12" id="SubModule1" name="SubModule1" value="" placeholder="Enter Sub Module 1" required>
                                    </div>
                                    <div class="col-6 pr-1" style="max-width: 245px;">
                                        <label class="m-0">Sub Module 2<span style="color: red;">*</span></label>
                                        <input type="text" class="form-control col-md-12" id="SubModule2" name="SubModule2" value="" placeholder="Enter Sub Module 2" required>
                                    </div>
                                    <div class="col-8 pr-1" style="max-width: 500px;">
                                        <label class="m-0">Test Scenario</label>
                                        <textarea type="text" class="form-control col-md-12" id="TestScenario" name="TestScenario" value="" placeholder="Enter Test Scenario"></textarea>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-6 pr-1" style="max-width: 245px;">
                                        <label class="m-0">TC<span style="color: red;">*</span></label>
                                        <input type="number" class="form-control col-md-12" id="TC" name="TC" value="" placeholder="Enter TC" required>
                                    </div>
                                    <div class="col-6 pr-1" style="max-width: 245px;">
                                        <label class="m-0">POC<span style="color: red;">*</span></label>
                                        <input type="text" class="form-control col-md-12" id="POC" name="POC" value="" placeholder="Enter POC" required>
                                    </div>
                                    <div class="col-6 pr-1" style=" max-width: 245px;">
                                        <label for="inputTaskStatusId">Task Priority<span style="color:red;">*</span></label>
                                        @Html.DropDownList("TaskPriorityId", Html.GetEnumSelectList<TaskPriority>(), "Choose..", htmlAttributes: new { @class = "form-control", @required = "required" })
                                    </div>
                                    <div class="col-6 pr-1" style="max-width: 245px;">
                                        <label class="m-0">Planned Execution Date</label>
                                        <input type="date" class="form-control col-md-12" id="PlannedExecutionDate" name="PlannedExecutionDate" value="" placeholder="Enter Planned Execution Date">
                                    </div>
                                    <div class="col-6 pr-1" style="max-width: 245px;">
                                        <label class="m-0">Actual Execution Date</label>
                                        <input type="date" class="form-control col-md-12" id="ActualExecutionDate" name="ActualExecutionDate" value="" placeholder="Enter Actual Execution Date">
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <button style="background-color:forestgreen;float: right" class="btn btn-success btn-sm" type="button" onclick="addMore()">Add Test Scenario</button>
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                    </div>




                    <div class="row mt-2" style="padding: 10px;">
                        <div style="overflow-y: scroll;">
                            <table class="reportTable" id="grid" role="grid" aria-describedby="tableExport_filter_info" style="width: 1018px;">
                                <thead>
                                    <tr role="row">
                                        <th class="sorting_asc" tabindex="0" aria-controls="tableExport_filter" rowspan="1" colspan="1" aria-sort="ascending" aria-label="SL: activate to sort column descending" style="min-width: 50px;">SL NO</th>
                                        <th class="sorting" tabindex="0" aria-controls="tableExport_filter" aria-label="Forest Department: activate to sort column ascending" style="min-width: 80px;">Project</th>
                                        <th class="sorting" tabindex="0" aria-controls="tableExport_filter" aria-label="Forest Beat: activate to sort column ascending" style="min-width: 95px;">Task</th>
                                        <th class="sorting" tabindex="0" aria-controls="tableExport_filter" aria-label="Forest Beat: activate to sort column ascending" style="min-width: 95px;">Module</th>
                                        <th class="sorting" tabindex="0" aria-controls="tableExport_filter" aria-label="Forest Beat: activate to sort column ascending" style="min-width: 95px;">Task Status</th>
                                        <th class="sorting" tabindex="0" aria-controls="tableExport_filter" aria-label="Comment: activate to sort column ascending" style="min-width: 50px;">Action</th>
                                    </tr>
                                </thead>
                                <tbody id="tbody">
                                </tbody>

                            </table>
                        </div>

                    </div>


                </div>
            </div>
        </form>


        <div class="d-flex justify-content-end mt-2">
            <button type="button" onclick="submitFormData()" id="SaveCommitteeManagement" class="btn btn-sm btn-green btn-submit mr-2">
                @* <i class="fa fa-save mr-2"></i>*@Save
            </button>
        </div>
        @* }*@
    </div>

    @*@{ Html.RenderPartial("_AddParticipant"); }*@


    <div class="card-header pull-left">
        <!--  <a href="/ExecutiveCommittee/Index" class="btn btn-warning">Return to Index</a> -->
    </div>

</div>

<script>
    var mailCount = 0;
    var femailCount = 0;
    var totalCount = 0;
    var mailPer = 0.0;
    var femailPer = 0.0;


    $("#lblExDesignation").hide();
    $("#lblSubExDesignation").hide();
    $("#lblSubDesignation").hide();

    //var allParticipants = [];
    //$("#CloseModal").on("click", function () {
    //    // clean up
    //});

    // $(".submit-btn").on("click", function () {
    //     if ($("#Form").valid()) {
    //         var valCell = $("#CellNo").val();
    //         alert(valCell);
    //     }
    // });


    $("#TestScenarioForm").validate({
        rules: {
            ProjectRequestId: {
                required: true
            },
            TaskOfProjectId: {
                required: true
            },
            Module: {
                required: true
            },
            UserType: {
                required: true
            },
            SubModule: {
                required: true
            },
            SubModule1: {
                required: true
            },
            SubModule2: {
                required: true
            },
            TC: {
                required: true
            },
            POC: {
                required: true
            },
            TaskPriorityId: {
                required: true
            },
            PlannedExecutionDate: {
                required: false
            },
            ActualExecutionDate: {
                required: false
            },
        },

    });
</script>


<script>
    $.validator.addMethod(
        'dateMustBeGreaterThanStart',
        function (value, element, requiredValue) {
            return dateMustBeGreaterThanStartDateFunc(value);
        },
        'Date must be greater or equal to start date.'
    );

    const dateMustBeGreaterThanStartDateFunc = date => {
        var startDate = $("#CommitteeFormDate").val();

        return (new Date(date)).toISOString() >= (new Date(startDate)).toISOString();
    }
</script>

<!--Commitee Management-->
<script>
    var count = 1;
    $("#OrderId").val(count);
    var itemDetails = [];

    function addMore(event) {
       
        //document.getElementById("CommitteeTypeId").disabled = true;
        //$("#OrderId").val(count);

        if (!$("#TestScenarioForm").valid()) {
            return;
        }
        var projectName = $("#ProjectRequestId :selected").text();
        var projectId = $("#ProjectRequestId").val();
        var taskName = $("#TaskOfProjectId :selected").text();
        var taskNameId = $("#TaskOfProjectId").val();
        var Module = $("#Module").val();
        var UserType = $("#UserType").val();
        var SubModule = $("#SubModule").val();
        var SubModule1 = $("#SubModule1").val();
        var SubModule2 = $("#SubModule2").val();
        var TestScenario = $("#TestScenario").val();
        var TaskPriorityId = $("#TaskPriorityId").val();
        var TaskPriorityName = $("#TaskPriorityId :selected").text();
        var TC = $("#TC").val();
        var POC = $("#POC").val();
        var planExecDate = $("#PlannedExecutionDate").val();
        var actualDate = $("#ActualExecutionDate").val();
        

        //var authorityUserText = $("#AuthorityUserId :selected").text();
        //var authorityUserValue = $("#AuthorityUserId").val();

        // var OrderValue = $("#OrderId").val();

        // if (OrderValue == '') {
        //     alert("Order No Not Set!");
        //     return;
        // }

        // //check member Validetion
        // var isUserExist = itemDetails.find(x => x.UserRoleId == authorityUserRoleValue);
        // if (count > 1) {
        //     if (isUserExist !== undefined) {
        //         alert("Alredy Role Added!");
        //         return;
        //     }
        // }

        // var isUserExistOrderNo = itemDetails.find(x => x.OrderId == OrderValue);
        // if (count > 1) {
        //     if (isUserExistOrderNo !== undefined) {
        //         alert("Alredy Order No Added!");
        //         return;
        //     }
        // }



        // if (authorityUserRoleValue.length <= 0) {
        //     alert("Please Select User Role!");
        //     return;
        // }

        //if (authorityUserValue.length <= 0) {
        //    alert("Please Select User Name!");
        //    return;
        //}




        //if(memberNameValue.length <= 0 && otherMemberValue.length <= 0)
        //{
        //    alert("Please Select Member!");
        //    return;
        //}


        //event.preventDefault();
        var tbody = $("#tbody");

        tbody.append(`
                                 <tr role="row" class="trClass" data-id="${count}">
                                            <td class="Id">${count}</td>
                                                                <td data-designation="${projectId}" class="UserRoleId">${projectName}</td>
                                                            <td class="taskId">${taskName}</td>
                                                                <td class="Module">${Module}</td>
                                                                <td class="priority">${TaskPriorityName}</td>
                                            <td>
                                                <div>
                                                        <button style="background-color:red" class="btn btn-danger btn-sm" onclick="removeItem(${count})">Remove</button>
                                                </div>
                                            </td>
                                        </tr>
                           `);

        itemDetails.push({
            //Id: id,
            Count: count,
            ProjectRequestId: projectId,
            TaskOfProjectId : taskNameId,
            Module : Module,
            UserType: UserType,
            SubModule: SubModule,
            SubModule1: SubModule1,
            SubModule2: SubModule2,
            ScenarioDescription: TestScenario,
            TC: TC,
            POC: POC,
            TaskPriority: TaskPriorityId,
            PlannedExecutionDate: planExecDate,
            ActualExecutionDate: actualDate
        });

        count = count + 1;

        //Refresh Form
        $("#Module").val("");
        $("#UserType").val("");
        $("#SubModule").val("");
        $("#SubModule1").val("");
        $("#SubModule2").val("");
        $("#TestScenario").val("");
        $("#TaskPriorityId").val("");
        // $("#TaskPriorityId").selectpicker('refresh');
        $("#TC").val(0);
        $("#POC").val("");
        $("#PlannedExecutionDate").val("");
        $("#ActualExecutionDate").val("");
    }

</script>

<script>


    function removeItem(id) {
        for (var i = 0; i < itemDetails.length; i++) {
            if (itemDetails[i].Count === id) {
                itemDetails.splice(i, 1);
                //break;
            }
        }
        //alert(id);
        $(`[data-id=${id}]`).remove();
        

        // $('#grid > tbody  > tr').each(function (index, tr) {

        //     //console.log(this.cells[5].innerText);

        //     //if(this.cells[5].innerText == "Male")
        //     //{
        //     //  mailCount++;
        //     //}
        //     //if(this.cells[5].innerText == "Female")
        //     //{
        //     //  femailCount++;
        //     //}
        // });

    }



    function submitFormData(event) {
        // var isFormValid = $("#TestScenarioForm").valid();
        // if (isFormValid == false) {
        //     return;
        // }

       

        var formData = new FormData();

        formData.append('ProjectRequestId', $("#ProjectRequestId").val());
        formData.append('TaskId', $("#TaskOfProjectId").val());

        if (itemDetails.length <= 0) {
            alert("Please Add minimum one Test Scenario !");
            return;
        }
        var testScenarios = itemDetails.filter(Boolean);
        formData.append('TestScenarios', JSON.stringify(testScenarios));

        console.log(formData);
        ////var Id = $("#VisaPolicyConfigurationId").val();


        $.ajax({
            type: "POST",
            url: "/TestScenario/Create",
            data: formData,
            cache: false,
            contentType: false,
            processData: false,
            dataType: 'json',
            success: function (response) {
               
                if (response.Success == true) {
                    swal({
                        title: "Success",
                        text: response.Message,
                        type: "success"
                    },
                        function () {
                            window.location.href = "/TestScenario/Index";
                        }
                    );
                }
                else {
                    return;
                }
                //location.reload();
            }
        });
    }




</script>


<script>
    $("#UserRoleId").change(function () {
       
        var selectedItem = $(this).val();
        var UserRoleId = $("#UserRoleId");
        $.ajax({
            cache: false,
            type: "GET",
            url: "/PermissionHeaderSettings/GetUserNameByUserRoleId",
            data: { "userRoleId": selectedItem },
            success: function (data) {
               
                $("#UserId > option").remove();
                userId.html('<option value="">Choose..</option>');

                $.each(data, function (id, option) {
                    userRoleId.append($('<option></option>').val(option.Id).html(option.UserName));
                });
                //PresentUpazillaId.prop("disabled", false);
            },
            error: function (xhr, ajaxOptions, thrownError) {

            }
        });
    });

    $("#ProjectRequestId").change(function () {
       
        var selectedItem = $(this).val();
        var TaskList = $("#TaskOfProjectId");
        if (selectedItem == "" || selectedItem == null) {
            return true;
        }

        $.ajax({
            cache: false,
            type: "GET",
            url: "/Task/GetTaskListsByProJectId",
            data: { "id": selectedItem },
            success: function (data) {
               
                console.log(data);
                TaskList.html('<option value="">Choose..</option>');
                $.each(data, function (id, option) {
                    TaskList.append($('<option></option>').val(option.Id).html(option.TaskTitle));
                });
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve data.');
            }
        });
    });


</script>
