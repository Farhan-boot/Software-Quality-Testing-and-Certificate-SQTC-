// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PTSL.GENERIC.Common.Entity;

#nullable disable

namespace PTSL.GENERIC.Api.Migrations
{
    [DbContext(typeof(GENERICWriteOnlyCtx))]
    [Migration("20240530113652_ProjectStateLog")]
    partial class ProjectStateLog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.AccessMapper", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessList")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("AccessList");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<byte>("IsVisible")
                        .HasColumnType("smallint")
                        .HasColumnName("IsVisible");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<byte>("RoleStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("RoleStatus");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("AccessMapper", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Accesslist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte>("AccessStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("AccessStatus");

                    b.Property<string>("ActionName")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ActionName");

                    b.Property<int?>("BaseModuleIndex")
                        .HasColumnType("int")
                        .HasColumnName("BaseModuleIndex");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ControllerName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("IconClass")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("IconClass");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool?>("IsAvailableForApproval")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<byte>("IsVisible")
                        .HasColumnType("smallint")
                        .HasColumnName("IsVisible");

                    b.Property<string>("Mask")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Mask");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("ModuleId");

                    b.Property<long?>("PermissionHeaderSettingsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PermissionHeaderSettingsId");

                    b.ToTable("Accesslist", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Archive.RegistrationArchive", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ArchiveName")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentDescription")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("RegistrationArchive", "Archive");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Archive.RegistrationArchiveFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FileName")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RegistrationArchiveId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("RegistrationArchiveId");

                    b.ToTable("RegistrationArchiveFile", "Archive");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Documents.AgreementDocuments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Agreement_FirstPage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Agreement_ForthPage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Agreement_LastPage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Agreement_SecondPage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Agreement_ThirdPage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProjectRequestId");

                    b.ToTable("AgreementDocuments", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Documents.AllTypesOfDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<string>("EditorContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("RejectionComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TestingType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<string>("VersionNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.ToTable("AllTypesOfDocument", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Documents.ApprovalForAllDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AllTypesOfDocumentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("PermissionRowSettingsId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProcessFlowType")
                        .HasColumnType("integer");

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SenderRoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SendingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StatusForPdf")
                        .HasColumnType("integer");

                    b.Property<int?>("TestingType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AllTypesOfDocumentId");

                    b.HasIndex("PermissionRowSettingsId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SenderRoleId");

                    b.ToTable("ApprovalForAllDocument", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Documents.DocumentsByType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DocumentCategoriesId")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentModuleType")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoumentPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoumentUniqueName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("MeetingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DocumentCategoriesId");

                    b.HasIndex("MeetingId");

                    b.HasIndex("ProjectRequestId");

                    b.ToTable("DocumentsByType", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CategoryName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Category", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Certification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CertificationName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("VendorName");

                    b.HasKey("Id");

                    b.ToTable("Certification", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Designation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Designation", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.DocumentCategories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("DocumentCategories", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.MeetingType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MeetingTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("MeetingTypeName");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("MeetingType", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("SkillName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Skill", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.GeneralSetup.TaskType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<int>("TaskAuthority")
                        .HasColumnType("integer");

                    b.Property<string>("TaskTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TaskTypeName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("TaskType", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.HardwareTestings.HardwareTesting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("RequiredSpecification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecificationAsPerContract")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubItem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TaskOfProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("TestResult")
                        .HasColumnType("integer");

                    b.Property<long>("TestScopeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.HasIndex("TaskOfProjectId");

                    b.HasIndex("TestScopeId");

                    b.ToTable("HardwareTesting", "HT");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.HardwareTestings.TestScope", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TaskOfProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("TenderID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestItem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.HasIndex("TaskOfProjectId");

                    b.ToTable("TestScope", "HT");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Meetings.AttendedUserMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AttendeduserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AttendeduserId");

                    b.HasIndex("MeetingId");

                    b.ToTable("AttendedUserMeeting", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Meetings.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<bool?>("IsInitiatedBySqtc")
                        .HasColumnType("boolean");

                    b.Property<string>("MeetingAgenda")
                        .HasColumnType("text");

                    b.Property<DateTime?>("MeetingEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MeetingEntryPass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("MeetingStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("MeetingStatus")
                        .HasColumnType("integer");

                    b.Property<string>("MeetingTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("MeetingTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("MeetingTypeId");

                    b.HasIndex("ProjectRequestId");

                    b.ToTable("Meeting", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Meetings.MeetingFiles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingFiles", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<byte>("IsVisible")
                        .HasColumnType("smallint");

                    b.Property<int>("MenueOrder")
                        .HasColumnType("int")
                        .HasColumnName("MenueOrder");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleIcon")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ModuleIcon");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ModuleName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Module", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionHeaderSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int?>("ModuleEnumId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("PermissionHeaderSettings", "PermissionSettings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionRowSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionHeaderSettingsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionHeaderSettingsId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("PermissionRowSettings", "PermissionSettings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PmsGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("GroupDescription")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("GroupDescription");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("GroupName");

                    b.Property<byte>("GroupStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("GroupStatus");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<byte>("IsVisible")
                        .HasColumnType("smallint")
                        .HasColumnName("IsVisible");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("PmsGroup", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.ApprovalForProjectLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("PermissionRowSettingsId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProcessFlowType")
                        .HasColumnType("integer");

                    b.Property<long?>("ProjectID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SenderRoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SendingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SendingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("PermissionRowSettingsId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SenderRoleId");

                    b.ToTable("ApprovalForProjectLog", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.BugAndDefect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActualResult")
                        .HasColumnType("text");

                    b.Property<int>("BugAndDefectSeverity")
                        .HasColumnType("integer");

                    b.Property<int>("BugAndDefectStatus")
                        .HasColumnType("integer");

                    b.Property<string>("BugzillaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DefectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefectedSummary")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpectedResult")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReportedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReportedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Resulation")
                        .HasColumnType("text");

                    b.Property<string>("StepstoReproduce")
                        .HasColumnType("text");

                    b.Property<long>("TaskOfProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestCaseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.HasIndex("ReportedBy");

                    b.HasIndex("TaskOfProjectId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("BugAndDefect", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.BugAndDefectFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BugAndDefectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("BugAndDefectId");

                    b.ToTable("BugAndDefectFile", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.BugAndDefectLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BugAndDefectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsUpdateByBugzilla")
                        .HasColumnType("boolean");

                    b.Property<string>("LogRemarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("BugAndDefectId");

                    b.ToTable("BugAndDefectLog", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("ProjectApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<string>("RejectionComment")
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ProjectRequest", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.ProjectRquestLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.ToTable("ProjectRquestLog", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.ProjectStateLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsStateCompleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProjectState")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.ToTable("ProjectStateLog", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TaskLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskOfProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("TaskOfProjectId");

                    b.ToTable("TaskLog", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TaskOfProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProjectType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TaskDeadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TaskEstimationHour")
                        .HasColumnType("double precision");

                    b.Property<string>("TaskFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TaskOfProjectStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TaskPriority")
                        .HasColumnType("integer");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TaskTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskOfProject", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TaskTimeTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<double>("RemainingTimeHour")
                        .HasColumnType("double precision");

                    b.Property<long>("TaskOfProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("TaskOfProjectStatus")
                        .HasColumnType("integer");

                    b.Property<double>("TimeSpentHour")
                        .HasColumnType("double precision");

                    b.Property<string>("TrackingDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("TaskOfProjectId");

                    b.ToTable("TaskTimeTracking", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TestCase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ActualExecutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ActualResult")
                        .HasColumnType("text");

                    b.Property<string>("CaseDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Chrome")
                        .HasColumnType("boolean");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("Edge")
                        .HasColumnType("boolean");

                    b.Property<long>("ExecutedByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpectedResult")
                        .HasColumnType("text");

                    b.Property<bool>("Firefox")
                        .HasColumnType("boolean");

                    b.Property<bool>("IE")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PlannedExecutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskOfProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestCaseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestCaseNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TestCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestData")
                        .HasColumnType("text");

                    b.Property<int>("TestResult")
                        .HasColumnType("integer");

                    b.Property<long>("TestScenarioId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ExecutedByUserId");

                    b.HasIndex("ProjectRequestId");

                    b.HasIndex("TaskOfProjectId");

                    b.HasIndex("TestCategoryId");

                    b.HasIndex("TestScenarioId");

                    b.ToTable("TestCase", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TestCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("TestCategory", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TestScenario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ActualExecutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("POC")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PlannedExecutionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("ScenarioDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubModule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubModule1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubModule2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TC")
                        .HasColumnType("integer");

                    b.Property<long>("TaskOfProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("TaskPriority")
                        .HasColumnType("integer");

                    b.Property<string>("TestScenarioNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.HasIndex("TaskOfProjectId");

                    b.ToTable("TestScenario", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TestStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActualResult")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpectedResult")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskOfProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestCaseId")
                        .HasColumnType("bigint");

                    b.Property<string>("TestData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TestStepId")
                        .HasColumnType("bigint");

                    b.Property<string>("Test_Step")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.HasIndex("TaskOfProjectId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestStep", "PR");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.DepositSlipFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FilePathUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentInformationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("PaymentInformationId");

                    b.ToTable("DepositSlipFile", "ProjectPackageConfiguration");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool?>("IsApprove")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RatingCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.ToTable("Feedback", "ProjectPackageConfiguration");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.PaymentCalculationHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("GrandTotal")
                        .HasColumnType("numeric");

                    b.Property<string>("GrandTotalInWord")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("NetTotal")
                        .HasColumnType("numeric");

                    b.Property<long?>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskOfProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.HasIndex("TaskOfProjectId");

                    b.ToTable("PaymentCalculationHeader", "ProjectPackageConfiguration");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.PaymentCalculationRow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberOfPackage")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentCalculationHeaderId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectModuleNameId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectPackageId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<decimal?>("Vat")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PaymentCalculationHeaderId");

                    b.HasIndex("ProjectModuleNameId");

                    b.HasIndex("ProjectPackageId");

                    b.ToTable("PaymentCalculationRow", "ProjectPackageConfiguration");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.PaymentInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BankDepositeAccountName")
                        .HasColumnType("text");

                    b.Property<string>("BankDepositeAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("BankDepositeAddress")
                        .HasColumnType("text");

                    b.Property<string>("BankDepositeBankName")
                        .HasColumnType("text");

                    b.Property<string>("BankDepositeBranchName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BankDepositeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("BankDepositeDepositeAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("BankDepositorName")
                        .HasColumnType("text");

                    b.Property<string>("ChequeDepositAccountName")
                        .HasColumnType("text");

                    b.Property<string>("ChequeDepositAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("ChequeDepositAddress")
                        .HasColumnType("text");

                    b.Property<double?>("ChequeDepositAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("ChequeDepositBankName")
                        .HasColumnType("text");

                    b.Property<string>("ChequeDepositBranchName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChequeDepositDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ChequeDepositName")
                        .HasColumnType("text");

                    b.Property<string>("ChequeNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepositSlipFileId")
                        .HasColumnType("bigint");

                    b.Property<string>("FromAccountName")
                        .HasColumnType("text");

                    b.Property<string>("FromAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("FromAddress")
                        .HasColumnType("text");

                    b.Property<string>("FromBankName")
                        .HasColumnType("text");

                    b.Property<string>("FromBranchName")
                        .HasColumnType("text");

                    b.Property<decimal?>("FromDepositAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("FromDepositDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<long?>("PaymentCalculationHeaderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PaymentMethodEnumId")
                        .HasColumnType("integer");

                    b.Property<string>("ToAccountName")
                        .HasColumnType("text");

                    b.Property<string>("ToAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("ToAddress")
                        .HasColumnType("text");

                    b.Property<string>("ToBankName")
                        .HasColumnType("text");

                    b.Property<string>("ToBranchName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("PaymentCalculationHeaderId");

                    b.ToTable("PaymentInformation", "ProjectPackageConfiguration");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.ProjectModuleName", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("ProjectModuleName", "ProjectPackageConfiguration");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.ProjectPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("PackageDescription")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PackageName")
                        .HasColumnType("varchar(500)");

                    b.Property<long?>("ProjectModuleNameId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ProjectModuleNameId");

                    b.ToTable("ProjectPackage", "ProjectPackageConfiguration");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.ProjectPricingSetup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<long?>("ProjectModuleNameId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectPackageId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ProjectModuleNameId");

                    b.HasIndex("ProjectPackageId");

                    b.ToTable("ProjectPricingSetup", "ProjectPackageConfiguration");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.Reconciliation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("DisbursementAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DisbursementDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<bool?>("IsPaymentApproved")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPaymentDisbursement")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPaymentRelease")
                        .HasColumnType("boolean");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentInformationId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("ReconciliationRemark")
                        .HasColumnType("text");

                    b.Property<decimal?>("ReleaseAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("PaymentInformationId");

                    b.ToTable("Reconciliation", "ProjectPackageConfiguration");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SecurityTestings.SecurityTesting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("CVSS_Score")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("EaseOfExploitation")
                        .HasColumnType("integer");

                    b.Property<string>("Impact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("Issuedetail")
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeverityLevel")
                        .HasColumnType("integer");

                    b.Property<long>("TaskOfProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<string>("Vulnerability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VulnerableSection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.HasIndex("TaskOfProjectId");

                    b.ToTable("SecurityTesting", "ST");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SecurityTestings.SecurityTestingFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SecurityTestingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("SecurityTestingId");

                    b.ToTable("SecurityTestingFile", "ST");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Sqtc_Client.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ClientApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClientStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DesignationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("OfficialLetter")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserType")
                        .HasColumnType("integer");

                    b.Property<string>("WorkingEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.HasIndex("UserId1");

                    b.ToTable("Client", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Sqtc_ClientLog.ApprovalForRegisteredClientLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClientID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("PermissionRowSettingsId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProcessFlowType")
                        .HasColumnType("integer");

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SenderRoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SendingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SendingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("PermissionRowSettingsId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SenderRoleId");

                    b.ToTable("ApprovalForRegisteredClientLog", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Sqtc_ClientLog.ClientLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ClientID");

                    b.ToTable("ClientLog", "GS");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Designation")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RoleName");

                    b.Property<string>("SignatureUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserEmail");

                    b.Property<string>("UserGroup")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserGroup");

                    b.Property<long?>("UserGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("UserName");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("UserPassword");

                    b.Property<string>("UserPhone")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserPhone");

                    b.Property<long?>("UserRoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int")
                        .HasColumnName("UserStatus");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("User", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserEntitys.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.ToTable("RefreshToken", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserEntitys.UserRolePermissionMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserRolePermissionMap", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("GroupName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<byte>("IsDefault")
                        .HasColumnType("smallint")
                        .HasColumnName("IsDefault");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<byte>("IsUsed")
                        .HasColumnType("smallint")
                        .HasColumnName("IsUsed");

                    b.Property<byte>("IsVisible")
                        .HasColumnType("smallint")
                        .HasColumnName("IsVisible");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ModuleActionNames")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ModuleActionNames");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("UserGroup", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessList")
                        .IsRequired()
                        .HasColumnType("varchar(900)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(1);

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("DeletedAt")
                        .HasColumnOrder(3);

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsDeleted")
                        .HasColumnOrder(4);

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("RoleName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdatedAt")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("UserRoles", "System");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Accesslist", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Module", "Module")
                        .WithMany("AccessList")
                        .HasForeignKey("ModuleId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionHeaderSettings", "PermissionHeaderSettings")
                        .WithMany()
                        .HasForeignKey("PermissionHeaderSettingsId");

                    b.Navigation("Module");

                    b.Navigation("PermissionHeaderSettings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Archive.RegistrationArchiveFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Archive.RegistrationArchive", "RegistrationArchive")
                        .WithMany("RegistrationArchiveFiles")
                        .HasForeignKey("RegistrationArchiveId");

                    b.Navigation("RegistrationArchive");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Documents.AgreementDocuments", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Sqtc_Client.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId");

                    b.Navigation("Client");

                    b.Navigation("ProjectRequest");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Documents.AllTypesOfDocument", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRequest");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Documents.ApprovalForAllDocument", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Documents.AllTypesOfDocument", "AllTypesOfDocument")
                        .WithMany()
                        .HasForeignKey("AllTypesOfDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionRowSettings", "PermissionRowSettings")
                        .WithMany()
                        .HasForeignKey("PermissionRowSettingsId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "SenderRole")
                        .WithMany()
                        .HasForeignKey("SenderRoleId");

                    b.Navigation("AllTypesOfDocument");

                    b.Navigation("PermissionRowSettings");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("SenderRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Documents.DocumentsByType", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Sqtc_Client.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.DocumentCategories", "DocumentCategories")
                        .WithMany()
                        .HasForeignKey("DocumentCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Meetings.Meeting", "Meeting")
                        .WithMany()
                        .HasForeignKey("MeetingId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany("documentsByTypeList")
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("DocumentCategories");

                    b.Navigation("Meeting");

                    b.Navigation("ProjectRequest");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.HardwareTestings.HardwareTesting", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TaskOfProject", "TaskOfProject")
                        .WithMany()
                        .HasForeignKey("TaskOfProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.HardwareTestings.TestScope", "TestScope")
                        .WithMany()
                        .HasForeignKey("TestScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRequest");

                    b.Navigation("TaskOfProject");

                    b.Navigation("TestScope");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.HardwareTestings.TestScope", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TaskOfProject", "TaskOfProject")
                        .WithMany()
                        .HasForeignKey("TaskOfProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRequest");

                    b.Navigation("TaskOfProject");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Meetings.AttendedUserMeeting", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "AttendUser")
                        .WithMany("AttendedUserMeeting")
                        .HasForeignKey("AttendeduserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Meetings.Meeting", "Meeting")
                        .WithMany("AttendedUsers")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendUser");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Meetings.Meeting", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.MeetingType", "MeetingType")
                        .WithMany()
                        .HasForeignKey("MeetingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany("MeetingList")
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingType");

                    b.Navigation("ProjectRequest");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Meetings.MeetingFiles", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Meetings.Meeting", "Meeting")
                        .WithMany("MeetingFiles")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionHeaderSettings", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "User")
                        .WithMany("PermissionHeaderSettings")
                        .HasForeignKey("UserId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "UserRole")
                        .WithMany("PermissionHeaderSettings")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionRowSettings", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionHeaderSettings", "PermissionHeaderSettings")
                        .WithMany("PermissionRowSettings")
                        .HasForeignKey("PermissionHeaderSettingsId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "User")
                        .WithMany("PermissionRowSettings")
                        .HasForeignKey("UserId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "UserRole")
                        .WithMany("PermissionRowSettings")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("PermissionHeaderSettings");

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.ApprovalForProjectLog", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionRowSettings", "PermissionRowSettings")
                        .WithMany()
                        .HasForeignKey("PermissionRowSettingsId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "SenderRole")
                        .WithMany()
                        .HasForeignKey("SenderRoleId");

                    b.Navigation("PermissionRowSettings");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("SenderRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.BugAndDefect", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "User")
                        .WithMany("BugAndDefects")
                        .HasForeignKey("ReportedBy")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TaskOfProject", "TaskOfProject")
                        .WithMany()
                        .HasForeignKey("TaskOfProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TestCase", "TestCase")
                        .WithMany()
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRequest");

                    b.Navigation("TaskOfProject");

                    b.Navigation("TestCase");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.BugAndDefectFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.BugAndDefect", "BugAndDefect")
                        .WithMany("BugAndDefectFiles")
                        .HasForeignKey("BugAndDefectId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BugAndDefect");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.BugAndDefectLog", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.BugAndDefect", "BugAndDefect")
                        .WithMany()
                        .HasForeignKey("BugAndDefectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BugAndDefect");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Sqtc_Client.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.ProjectRquestLog", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRequest");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.ProjectStateLog", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRequest");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TaskLog", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TaskOfProject", "TaskOfProject")
                        .WithMany()
                        .HasForeignKey("TaskOfProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskOfProject");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TaskOfProject", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ProjectRequest");

                    b.Navigation("TaskType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TaskTimeTracking", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TaskOfProject", "TaskOfProject")
                        .WithMany()
                        .HasForeignKey("TaskOfProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskOfProject");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TestCase", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "User")
                        .WithMany("TestCases")
                        .HasForeignKey("ExecutedByUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TaskOfProject", "TaskOfProject")
                        .WithMany()
                        .HasForeignKey("TaskOfProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TestCategory", "TestCategory")
                        .WithMany()
                        .HasForeignKey("TestCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TestScenario", "TestScenario")
                        .WithMany()
                        .HasForeignKey("TestScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRequest");

                    b.Navigation("TaskOfProject");

                    b.Navigation("TestCategory");

                    b.Navigation("TestScenario");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TestScenario", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TaskOfProject", "TaskOfProject")
                        .WithMany()
                        .HasForeignKey("TaskOfProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRequest");

                    b.Navigation("TaskOfProject");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.TestStep", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TaskOfProject", "TaskOfProject")
                        .WithMany()
                        .HasForeignKey("TaskOfProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TestCase", "TestCase")
                        .WithMany()
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRequest");

                    b.Navigation("TaskOfProject");

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.DepositSlipFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.PaymentInformation", "PaymentInformation")
                        .WithMany("DepositSlipFiles")
                        .HasForeignKey("PaymentInformationId");

                    b.Navigation("PaymentInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.Feedback", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId");

                    b.Navigation("ProjectRequest");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.PaymentCalculationHeader", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TaskOfProject", "TaskOfProject")
                        .WithMany()
                        .HasForeignKey("TaskOfProjectId");

                    b.Navigation("ProjectRequest");

                    b.Navigation("TaskOfProject");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.PaymentCalculationRow", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.PaymentCalculationHeader", "PaymentCalculationHeader")
                        .WithMany("PaymentCalculationRows")
                        .HasForeignKey("PaymentCalculationHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.ProjectModuleName", "ProjectModuleName")
                        .WithMany()
                        .HasForeignKey("ProjectModuleNameId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.ProjectPackage", "ProjectPackage")
                        .WithMany()
                        .HasForeignKey("ProjectPackageId");

                    b.Navigation("PaymentCalculationHeader");

                    b.Navigation("ProjectModuleName");

                    b.Navigation("ProjectPackage");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.PaymentInformation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.PaymentCalculationHeader", "PaymentCalculationHeader")
                        .WithMany("PaymentInformation")
                        .HasForeignKey("PaymentCalculationHeaderId");

                    b.Navigation("PaymentCalculationHeader");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.ProjectPackage", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.ProjectModuleName", "ProjectModuleName")
                        .WithMany("ProjectPackages")
                        .HasForeignKey("ProjectModuleNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectModuleName");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.ProjectPricingSetup", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.ProjectModuleName", "ProjectModuleName")
                        .WithMany("ProjectPricingSetup")
                        .HasForeignKey("ProjectModuleNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.ProjectPackage", "ProjectPackage")
                        .WithMany("ProjectPricingSetup")
                        .HasForeignKey("ProjectPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectModuleName");

                    b.Navigation("ProjectPackage");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.Reconciliation", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.PaymentInformation", "PaymentInformation")
                        .WithMany("Reconciliations")
                        .HasForeignKey("PaymentInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SecurityTestings.SecurityTesting", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.Project.TaskOfProject", "TaskOfProject")
                        .WithMany()
                        .HasForeignKey("TaskOfProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRequest");

                    b.Navigation("TaskOfProject");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SecurityTestings.SecurityTestingFile", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.SecurityTestings.SecurityTesting", "SecurityTesting")
                        .WithMany("SecurityTestingFiles")
                        .HasForeignKey("SecurityTestingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityTesting");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Sqtc_Client.Client", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.GeneralSetup.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Designation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Sqtc_ClientLog.ApprovalForRegisteredClientLog", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionRowSettings", "PermissionRowSettings")
                        .WithMany()
                        .HasForeignKey("PermissionRowSettingsId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "SenderRole")
                        .WithMany()
                        .HasForeignKey("SenderRoleId");

                    b.Navigation("PermissionRowSettings");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");

                    b.Navigation("SenderRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Sqtc_ClientLog.ClientLog", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Sqtc_Client.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.User", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.Sqtc_Client.Client", "Client")
                        .WithMany("ClientUsers")
                        .HasForeignKey("ClientId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserGroup", null)
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId");

                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("Client");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserEntitys.UserRolePermissionMap", b =>
                {
                    b.HasOne("PTSL.GENERIC.Common.Entity.UserRole", "UserRole")
                        .WithMany("UserRolePermissionMaps")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Archive.RegistrationArchive", b =>
                {
                    b.Navigation("RegistrationArchiveFiles");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Meetings.Meeting", b =>
                {
                    b.Navigation("AttendedUsers");

                    b.Navigation("MeetingFiles");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Module", b =>
                {
                    b.Navigation("AccessList");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.PermissionSettings.PermissionHeaderSettings", b =>
                {
                    b.Navigation("PermissionRowSettings");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.BugAndDefect", b =>
                {
                    b.Navigation("BugAndDefectFiles");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Project.ProjectRequest", b =>
                {
                    b.Navigation("MeetingList");

                    b.Navigation("documentsByTypeList");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.PaymentCalculationHeader", b =>
                {
                    b.Navigation("PaymentCalculationRows");

                    b.Navigation("PaymentInformation");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.PaymentInformation", b =>
                {
                    b.Navigation("DepositSlipFiles");

                    b.Navigation("Reconciliations");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.ProjectModuleName", b =>
                {
                    b.Navigation("ProjectPackages");

                    b.Navigation("ProjectPricingSetup");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.ProjectPackageConfiguration.ProjectPackage", b =>
                {
                    b.Navigation("ProjectPricingSetup");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.SecurityTestings.SecurityTesting", b =>
                {
                    b.Navigation("SecurityTestingFiles");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.Sqtc_Client.Client", b =>
                {
                    b.Navigation("ClientUsers");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.User", b =>
                {
                    b.Navigation("AttendedUserMeeting");

                    b.Navigation("BugAndDefects");

                    b.Navigation("PermissionHeaderSettings");

                    b.Navigation("PermissionRowSettings");

                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("PTSL.GENERIC.Common.Entity.UserRole", b =>
                {
                    b.Navigation("PermissionHeaderSettings");

                    b.Navigation("PermissionRowSettings");

                    b.Navigation("UserRolePermissionMaps");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
